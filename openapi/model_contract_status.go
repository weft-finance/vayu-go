/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ContractStatus the model 'ContractStatus'
type ContractStatus string

// List of ContractStatus
const (
	ACTIVE ContractStatus = "Active"
	INACTIVE ContractStatus = "Inactive"
	TERMINATED ContractStatus = "Terminated"
	PENDING_TERMINATION ContractStatus = "PendingTermination"
	ERROR ContractStatus = "Error"
)

// All allowed values of ContractStatus enum
var AllowedContractStatusEnumValues = []ContractStatus{
	"Active",
	"Inactive",
	"Terminated",
	"PendingTermination",
	"Error",
}

func (v *ContractStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContractStatus(value)
	for _, existing := range AllowedContractStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContractStatus", value)
}

// NewContractStatusFromValue returns a pointer to a valid ContractStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContractStatusFromValue(v string) (*ContractStatus, error) {
	ev := ContractStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContractStatus: valid values are %v", v, AllowedContractStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContractStatus) IsValid() bool {
	for _, existing := range AllowedContractStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContractStatus value
func (v ContractStatus) Ptr() *ContractStatus {
	return &v
}

type NullableContractStatus struct {
	value *ContractStatus
	isSet bool
}

func (v NullableContractStatus) Get() *ContractStatus {
	return v.value
}

func (v *NullableContractStatus) Set(val *ContractStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableContractStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableContractStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractStatus(val *ContractStatus) *NullableContractStatus {
	return &NullableContractStatus{value: val, isSet: true}
}

func (v NullableContractStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

