/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebhookSubscribeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookSubscribeRequest{}

// WebhookSubscribeRequest struct for WebhookSubscribeRequest
type WebhookSubscribeRequest struct {
	CallbackUrl string `json:"callbackUrl"`
	EventType NotificationEventType `json:"eventType"`
}

type _WebhookSubscribeRequest WebhookSubscribeRequest

// NewWebhookSubscribeRequest instantiates a new WebhookSubscribeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookSubscribeRequest(callbackUrl string, eventType NotificationEventType) *WebhookSubscribeRequest {
	this := WebhookSubscribeRequest{}
	this.CallbackUrl = callbackUrl
	this.EventType = eventType
	return &this
}

// NewWebhookSubscribeRequestWithDefaults instantiates a new WebhookSubscribeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookSubscribeRequestWithDefaults() *WebhookSubscribeRequest {
	this := WebhookSubscribeRequest{}
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value
func (o *WebhookSubscribeRequest) GetCallbackUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value
// and a boolean to check if the value has been set.
func (o *WebhookSubscribeRequest) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackUrl, true
}

// SetCallbackUrl sets field value
func (o *WebhookSubscribeRequest) SetCallbackUrl(v string) {
	o.CallbackUrl = v
}

// GetEventType returns the EventType field value
func (o *WebhookSubscribeRequest) GetEventType() NotificationEventType {
	if o == nil {
		var ret NotificationEventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *WebhookSubscribeRequest) GetEventTypeOk() (*NotificationEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *WebhookSubscribeRequest) SetEventType(v NotificationEventType) {
	o.EventType = v
}

func (o WebhookSubscribeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookSubscribeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["callbackUrl"] = o.CallbackUrl
	toSerialize["eventType"] = o.EventType
	return toSerialize, nil
}

func (o *WebhookSubscribeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"callbackUrl",
		"eventType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookSubscribeRequest := _WebhookSubscribeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebhookSubscribeRequest)

	if err != nil {
		return err
	}

	*o = WebhookSubscribeRequest(varWebhookSubscribeRequest)

	return err
}

type NullableWebhookSubscribeRequest struct {
	value *WebhookSubscribeRequest
	isSet bool
}

func (v NullableWebhookSubscribeRequest) Get() *WebhookSubscribeRequest {
	return v.value
}

func (v *NullableWebhookSubscribeRequest) Set(val *WebhookSubscribeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookSubscribeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookSubscribeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookSubscribeRequest(val *WebhookSubscribeRequest) *NullableWebhookSubscribeRequest {
	return &NullableWebhookSubscribeRequest{value: val, isSet: true}
}

func (v NullableWebhookSubscribeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookSubscribeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


