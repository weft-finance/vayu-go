/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DeleteMeterResponseMeter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteMeterResponseMeter{}

// DeleteMeterResponseMeter struct for DeleteMeterResponseMeter
type DeleteMeterResponseMeter struct {
	// The name of the meter
	Name string `json:"name"`
	// The name of the event that the meter is tracking.
	EventName string `json:"eventName"`
	AggregationMethod AggregationMethod `json:"aggregationMethod"`
	Filter *Filter `json:"filter,omitempty"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	DeletedAt string `json:"deletedAt"`
	AdditionalProperties map[string]interface{}
}

type _DeleteMeterResponseMeter DeleteMeterResponseMeter

// NewDeleteMeterResponseMeter instantiates a new DeleteMeterResponseMeter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteMeterResponseMeter(name string, eventName string, aggregationMethod AggregationMethod, id string, createdAt time.Time, updatedAt time.Time, deletedAt string) *DeleteMeterResponseMeter {
	this := DeleteMeterResponseMeter{}
	this.Name = name
	this.EventName = eventName
	this.AggregationMethod = aggregationMethod
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.DeletedAt = deletedAt
	return &this
}

// NewDeleteMeterResponseMeterWithDefaults instantiates a new DeleteMeterResponseMeter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteMeterResponseMeterWithDefaults() *DeleteMeterResponseMeter {
	this := DeleteMeterResponseMeter{}
	return &this
}

// GetName returns the Name field value
func (o *DeleteMeterResponseMeter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeleteMeterResponseMeter) SetName(v string) {
	o.Name = v
}

// GetEventName returns the EventName field value
func (o *DeleteMeterResponseMeter) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *DeleteMeterResponseMeter) SetEventName(v string) {
	o.EventName = v
}

// GetAggregationMethod returns the AggregationMethod field value
func (o *DeleteMeterResponseMeter) GetAggregationMethod() AggregationMethod {
	if o == nil {
		var ret AggregationMethod
		return ret
	}

	return o.AggregationMethod
}

// GetAggregationMethodOk returns a tuple with the AggregationMethod field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetAggregationMethodOk() (*AggregationMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationMethod, true
}

// SetAggregationMethod sets field value
func (o *DeleteMeterResponseMeter) SetAggregationMethod(v AggregationMethod) {
	o.AggregationMethod = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *DeleteMeterResponseMeter) GetFilter() Filter {
	if o == nil || IsNil(o.Filter) {
		var ret Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetFilterOk() (*Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *DeleteMeterResponseMeter) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Filter and assigns it to the Filter field.
func (o *DeleteMeterResponseMeter) SetFilter(v Filter) {
	o.Filter = &v
}

// GetId returns the Id field value
func (o *DeleteMeterResponseMeter) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeleteMeterResponseMeter) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeleteMeterResponseMeter) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeleteMeterResponseMeter) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DeleteMeterResponseMeter) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DeleteMeterResponseMeter) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetDeletedAt returns the DeletedAt field value
func (o *DeleteMeterResponseMeter) GetDeletedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
func (o *DeleteMeterResponseMeter) GetDeletedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedAt, true
}

// SetDeletedAt sets field value
func (o *DeleteMeterResponseMeter) SetDeletedAt(v string) {
	o.DeletedAt = v
}

func (o DeleteMeterResponseMeter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteMeterResponseMeter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["eventName"] = o.EventName
	toSerialize["aggregationMethod"] = o.AggregationMethod
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["deletedAt"] = o.DeletedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteMeterResponseMeter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"eventName",
		"aggregationMethod",
		"id",
		"createdAt",
		"updatedAt",
		"deletedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteMeterResponseMeter := _DeleteMeterResponseMeter{}

	err = json.Unmarshal(data, &varDeleteMeterResponseMeter)

	if err != nil {
		return err
	}

	*o = DeleteMeterResponseMeter(varDeleteMeterResponseMeter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "eventName")
		delete(additionalProperties, "aggregationMethod")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "deletedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteMeterResponseMeter struct {
	value *DeleteMeterResponseMeter
	isSet bool
}

func (v NullableDeleteMeterResponseMeter) Get() *DeleteMeterResponseMeter {
	return v.value
}

func (v *NullableDeleteMeterResponseMeter) Set(val *DeleteMeterResponseMeter) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteMeterResponseMeter) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteMeterResponseMeter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteMeterResponseMeter(val *DeleteMeterResponseMeter) *NullableDeleteMeterResponseMeter {
	return &NullableDeleteMeterResponseMeter{value: val, isSet: true}
}

func (v NullableDeleteMeterResponseMeter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteMeterResponseMeter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


