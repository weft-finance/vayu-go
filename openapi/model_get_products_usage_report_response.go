/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GetProductsUsageReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetProductsUsageReportResponse{}

// GetProductsUsageReportResponse struct for GetProductsUsageReportResponse
type GetProductsUsageReportResponse struct {
	ContractStatus ContractStatus `json:"contractStatus"`
	CustomerName string `json:"customerName"`
	StartDate time.Time `json:"startDate"`
	EndDate time.Time `json:"endDate"`
	ContractStartDate time.Time `json:"contractStartDate"`
	DaysToContractEnd *float32 `json:"daysToContractEnd,omitempty"`
	ProductVariantName string `json:"productVariantName"`
	CommitmentConsumptionPercentage *float32 `json:"commitmentConsumptionPercentage,omitempty"`
	TotalCommitmentCurrencyAmount *float32 `json:"totalCommitmentCurrencyAmount,omitempty"`
	TotalCommitmentUnitsAmount *float32 `json:"totalCommitmentUnitsAmount,omitempty"`
	CommercialTermsAmount *float32 `json:"commercialTermsAmount,omitempty"`
	ErpId *string `json:"erpId,omitempty"`
	Currency Currency `json:"currency"`
	UsageConsumptionCurrencyAmount *float32 `json:"usageConsumptionCurrencyAmount,omitempty"`
	UsageConsumptionUnitsAmount *float32 `json:"usageConsumptionUnitsAmount,omitempty"`
}

type _GetProductsUsageReportResponse GetProductsUsageReportResponse

// NewGetProductsUsageReportResponse instantiates a new GetProductsUsageReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetProductsUsageReportResponse(contractStatus ContractStatus, customerName string, startDate time.Time, endDate time.Time, contractStartDate time.Time, productVariantName string, currency Currency) *GetProductsUsageReportResponse {
	this := GetProductsUsageReportResponse{}
	this.ContractStatus = contractStatus
	this.CustomerName = customerName
	this.StartDate = startDate
	this.EndDate = endDate
	this.ContractStartDate = contractStartDate
	this.ProductVariantName = productVariantName
	this.Currency = currency
	return &this
}

// NewGetProductsUsageReportResponseWithDefaults instantiates a new GetProductsUsageReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetProductsUsageReportResponseWithDefaults() *GetProductsUsageReportResponse {
	this := GetProductsUsageReportResponse{}
	return &this
}

// GetContractStatus returns the ContractStatus field value
func (o *GetProductsUsageReportResponse) GetContractStatus() ContractStatus {
	if o == nil {
		var ret ContractStatus
		return ret
	}

	return o.ContractStatus
}

// GetContractStatusOk returns a tuple with the ContractStatus field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetContractStatusOk() (*ContractStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractStatus, true
}

// SetContractStatus sets field value
func (o *GetProductsUsageReportResponse) SetContractStatus(v ContractStatus) {
	o.ContractStatus = v
}

// GetCustomerName returns the CustomerName field value
func (o *GetProductsUsageReportResponse) GetCustomerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetCustomerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerName, true
}

// SetCustomerName sets field value
func (o *GetProductsUsageReportResponse) SetCustomerName(v string) {
	o.CustomerName = v
}

// GetStartDate returns the StartDate field value
func (o *GetProductsUsageReportResponse) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *GetProductsUsageReportResponse) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *GetProductsUsageReportResponse) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *GetProductsUsageReportResponse) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetContractStartDate returns the ContractStartDate field value
func (o *GetProductsUsageReportResponse) GetContractStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ContractStartDate
}

// GetContractStartDateOk returns a tuple with the ContractStartDate field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetContractStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractStartDate, true
}

// SetContractStartDate sets field value
func (o *GetProductsUsageReportResponse) SetContractStartDate(v time.Time) {
	o.ContractStartDate = v
}

// GetDaysToContractEnd returns the DaysToContractEnd field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetDaysToContractEnd() float32 {
	if o == nil || IsNil(o.DaysToContractEnd) {
		var ret float32
		return ret
	}
	return *o.DaysToContractEnd
}

// GetDaysToContractEndOk returns a tuple with the DaysToContractEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetDaysToContractEndOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysToContractEnd) {
		return nil, false
	}
	return o.DaysToContractEnd, true
}

// HasDaysToContractEnd returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasDaysToContractEnd() bool {
	if o != nil && !IsNil(o.DaysToContractEnd) {
		return true
	}

	return false
}

// SetDaysToContractEnd gets a reference to the given float32 and assigns it to the DaysToContractEnd field.
func (o *GetProductsUsageReportResponse) SetDaysToContractEnd(v float32) {
	o.DaysToContractEnd = &v
}

// GetProductVariantName returns the ProductVariantName field value
func (o *GetProductsUsageReportResponse) GetProductVariantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVariantName
}

// GetProductVariantNameOk returns a tuple with the ProductVariantName field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetProductVariantNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVariantName, true
}

// SetProductVariantName sets field value
func (o *GetProductsUsageReportResponse) SetProductVariantName(v string) {
	o.ProductVariantName = v
}

// GetCommitmentConsumptionPercentage returns the CommitmentConsumptionPercentage field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetCommitmentConsumptionPercentage() float32 {
	if o == nil || IsNil(o.CommitmentConsumptionPercentage) {
		var ret float32
		return ret
	}
	return *o.CommitmentConsumptionPercentage
}

// GetCommitmentConsumptionPercentageOk returns a tuple with the CommitmentConsumptionPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetCommitmentConsumptionPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.CommitmentConsumptionPercentage) {
		return nil, false
	}
	return o.CommitmentConsumptionPercentage, true
}

// HasCommitmentConsumptionPercentage returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasCommitmentConsumptionPercentage() bool {
	if o != nil && !IsNil(o.CommitmentConsumptionPercentage) {
		return true
	}

	return false
}

// SetCommitmentConsumptionPercentage gets a reference to the given float32 and assigns it to the CommitmentConsumptionPercentage field.
func (o *GetProductsUsageReportResponse) SetCommitmentConsumptionPercentage(v float32) {
	o.CommitmentConsumptionPercentage = &v
}

// GetTotalCommitmentCurrencyAmount returns the TotalCommitmentCurrencyAmount field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetTotalCommitmentCurrencyAmount() float32 {
	if o == nil || IsNil(o.TotalCommitmentCurrencyAmount) {
		var ret float32
		return ret
	}
	return *o.TotalCommitmentCurrencyAmount
}

// GetTotalCommitmentCurrencyAmountOk returns a tuple with the TotalCommitmentCurrencyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetTotalCommitmentCurrencyAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCommitmentCurrencyAmount) {
		return nil, false
	}
	return o.TotalCommitmentCurrencyAmount, true
}

// HasTotalCommitmentCurrencyAmount returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasTotalCommitmentCurrencyAmount() bool {
	if o != nil && !IsNil(o.TotalCommitmentCurrencyAmount) {
		return true
	}

	return false
}

// SetTotalCommitmentCurrencyAmount gets a reference to the given float32 and assigns it to the TotalCommitmentCurrencyAmount field.
func (o *GetProductsUsageReportResponse) SetTotalCommitmentCurrencyAmount(v float32) {
	o.TotalCommitmentCurrencyAmount = &v
}

// GetTotalCommitmentUnitsAmount returns the TotalCommitmentUnitsAmount field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetTotalCommitmentUnitsAmount() float32 {
	if o == nil || IsNil(o.TotalCommitmentUnitsAmount) {
		var ret float32
		return ret
	}
	return *o.TotalCommitmentUnitsAmount
}

// GetTotalCommitmentUnitsAmountOk returns a tuple with the TotalCommitmentUnitsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetTotalCommitmentUnitsAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCommitmentUnitsAmount) {
		return nil, false
	}
	return o.TotalCommitmentUnitsAmount, true
}

// HasTotalCommitmentUnitsAmount returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasTotalCommitmentUnitsAmount() bool {
	if o != nil && !IsNil(o.TotalCommitmentUnitsAmount) {
		return true
	}

	return false
}

// SetTotalCommitmentUnitsAmount gets a reference to the given float32 and assigns it to the TotalCommitmentUnitsAmount field.
func (o *GetProductsUsageReportResponse) SetTotalCommitmentUnitsAmount(v float32) {
	o.TotalCommitmentUnitsAmount = &v
}

// GetCommercialTermsAmount returns the CommercialTermsAmount field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetCommercialTermsAmount() float32 {
	if o == nil || IsNil(o.CommercialTermsAmount) {
		var ret float32
		return ret
	}
	return *o.CommercialTermsAmount
}

// GetCommercialTermsAmountOk returns a tuple with the CommercialTermsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetCommercialTermsAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.CommercialTermsAmount) {
		return nil, false
	}
	return o.CommercialTermsAmount, true
}

// HasCommercialTermsAmount returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasCommercialTermsAmount() bool {
	if o != nil && !IsNil(o.CommercialTermsAmount) {
		return true
	}

	return false
}

// SetCommercialTermsAmount gets a reference to the given float32 and assigns it to the CommercialTermsAmount field.
func (o *GetProductsUsageReportResponse) SetCommercialTermsAmount(v float32) {
	o.CommercialTermsAmount = &v
}

// GetErpId returns the ErpId field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetErpId() string {
	if o == nil || IsNil(o.ErpId) {
		var ret string
		return ret
	}
	return *o.ErpId
}

// GetErpIdOk returns a tuple with the ErpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetErpIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErpId) {
		return nil, false
	}
	return o.ErpId, true
}

// HasErpId returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasErpId() bool {
	if o != nil && !IsNil(o.ErpId) {
		return true
	}

	return false
}

// SetErpId gets a reference to the given string and assigns it to the ErpId field.
func (o *GetProductsUsageReportResponse) SetErpId(v string) {
	o.ErpId = &v
}

// GetCurrency returns the Currency field value
func (o *GetProductsUsageReportResponse) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *GetProductsUsageReportResponse) SetCurrency(v Currency) {
	o.Currency = v
}

// GetUsageConsumptionCurrencyAmount returns the UsageConsumptionCurrencyAmount field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetUsageConsumptionCurrencyAmount() float32 {
	if o == nil || IsNil(o.UsageConsumptionCurrencyAmount) {
		var ret float32
		return ret
	}
	return *o.UsageConsumptionCurrencyAmount
}

// GetUsageConsumptionCurrencyAmountOk returns a tuple with the UsageConsumptionCurrencyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetUsageConsumptionCurrencyAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UsageConsumptionCurrencyAmount) {
		return nil, false
	}
	return o.UsageConsumptionCurrencyAmount, true
}

// HasUsageConsumptionCurrencyAmount returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasUsageConsumptionCurrencyAmount() bool {
	if o != nil && !IsNil(o.UsageConsumptionCurrencyAmount) {
		return true
	}

	return false
}

// SetUsageConsumptionCurrencyAmount gets a reference to the given float32 and assigns it to the UsageConsumptionCurrencyAmount field.
func (o *GetProductsUsageReportResponse) SetUsageConsumptionCurrencyAmount(v float32) {
	o.UsageConsumptionCurrencyAmount = &v
}

// GetUsageConsumptionUnitsAmount returns the UsageConsumptionUnitsAmount field value if set, zero value otherwise.
func (o *GetProductsUsageReportResponse) GetUsageConsumptionUnitsAmount() float32 {
	if o == nil || IsNil(o.UsageConsumptionUnitsAmount) {
		var ret float32
		return ret
	}
	return *o.UsageConsumptionUnitsAmount
}

// GetUsageConsumptionUnitsAmountOk returns a tuple with the UsageConsumptionUnitsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProductsUsageReportResponse) GetUsageConsumptionUnitsAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.UsageConsumptionUnitsAmount) {
		return nil, false
	}
	return o.UsageConsumptionUnitsAmount, true
}

// HasUsageConsumptionUnitsAmount returns a boolean if a field has been set.
func (o *GetProductsUsageReportResponse) HasUsageConsumptionUnitsAmount() bool {
	if o != nil && !IsNil(o.UsageConsumptionUnitsAmount) {
		return true
	}

	return false
}

// SetUsageConsumptionUnitsAmount gets a reference to the given float32 and assigns it to the UsageConsumptionUnitsAmount field.
func (o *GetProductsUsageReportResponse) SetUsageConsumptionUnitsAmount(v float32) {
	o.UsageConsumptionUnitsAmount = &v
}

func (o GetProductsUsageReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetProductsUsageReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contractStatus"] = o.ContractStatus
	toSerialize["customerName"] = o.CustomerName
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate
	toSerialize["contractStartDate"] = o.ContractStartDate
	if !IsNil(o.DaysToContractEnd) {
		toSerialize["daysToContractEnd"] = o.DaysToContractEnd
	}
	toSerialize["productVariantName"] = o.ProductVariantName
	if !IsNil(o.CommitmentConsumptionPercentage) {
		toSerialize["commitmentConsumptionPercentage"] = o.CommitmentConsumptionPercentage
	}
	if !IsNil(o.TotalCommitmentCurrencyAmount) {
		toSerialize["totalCommitmentCurrencyAmount"] = o.TotalCommitmentCurrencyAmount
	}
	if !IsNil(o.TotalCommitmentUnitsAmount) {
		toSerialize["totalCommitmentUnitsAmount"] = o.TotalCommitmentUnitsAmount
	}
	if !IsNil(o.CommercialTermsAmount) {
		toSerialize["commercialTermsAmount"] = o.CommercialTermsAmount
	}
	if !IsNil(o.ErpId) {
		toSerialize["erpId"] = o.ErpId
	}
	toSerialize["currency"] = o.Currency
	if !IsNil(o.UsageConsumptionCurrencyAmount) {
		toSerialize["usageConsumptionCurrencyAmount"] = o.UsageConsumptionCurrencyAmount
	}
	if !IsNil(o.UsageConsumptionUnitsAmount) {
		toSerialize["usageConsumptionUnitsAmount"] = o.UsageConsumptionUnitsAmount
	}
	return toSerialize, nil
}

func (o *GetProductsUsageReportResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contractStatus",
		"customerName",
		"startDate",
		"endDate",
		"contractStartDate",
		"productVariantName",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetProductsUsageReportResponse := _GetProductsUsageReportResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetProductsUsageReportResponse)

	if err != nil {
		return err
	}

	*o = GetProductsUsageReportResponse(varGetProductsUsageReportResponse)

	return err
}

type NullableGetProductsUsageReportResponse struct {
	value *GetProductsUsageReportResponse
	isSet bool
}

func (v NullableGetProductsUsageReportResponse) Get() *GetProductsUsageReportResponse {
	return v.value
}

func (v *NullableGetProductsUsageReportResponse) Set(val *GetProductsUsageReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetProductsUsageReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetProductsUsageReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetProductsUsageReportResponse(val *GetProductsUsageReportResponse) *NullableGetProductsUsageReportResponse {
	return &NullableGetProductsUsageReportResponse{value: val, isSet: true}
}

func (v NullableGetProductsUsageReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetProductsUsageReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


