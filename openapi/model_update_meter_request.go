/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateMeterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMeterRequest{}

// UpdateMeterRequest struct for UpdateMeterRequest
type UpdateMeterRequest struct {
	// The name of the meter
	Name *string `json:"name,omitempty"`
	// The name of the event that the meter is tracking.
	EventName *string `json:"eventName,omitempty"`
	AggregationMethod *AggregationMethod `json:"aggregationMethod,omitempty"`
	Filter *Filter `json:"filter,omitempty"`
}

// NewUpdateMeterRequest instantiates a new UpdateMeterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMeterRequest() *UpdateMeterRequest {
	this := UpdateMeterRequest{}
	return &this
}

// NewUpdateMeterRequestWithDefaults instantiates a new UpdateMeterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMeterRequestWithDefaults() *UpdateMeterRequest {
	this := UpdateMeterRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateMeterRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMeterRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateMeterRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateMeterRequest) SetName(v string) {
	o.Name = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *UpdateMeterRequest) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMeterRequest) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *UpdateMeterRequest) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *UpdateMeterRequest) SetEventName(v string) {
	o.EventName = &v
}

// GetAggregationMethod returns the AggregationMethod field value if set, zero value otherwise.
func (o *UpdateMeterRequest) GetAggregationMethod() AggregationMethod {
	if o == nil || IsNil(o.AggregationMethod) {
		var ret AggregationMethod
		return ret
	}
	return *o.AggregationMethod
}

// GetAggregationMethodOk returns a tuple with the AggregationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMeterRequest) GetAggregationMethodOk() (*AggregationMethod, bool) {
	if o == nil || IsNil(o.AggregationMethod) {
		return nil, false
	}
	return o.AggregationMethod, true
}

// HasAggregationMethod returns a boolean if a field has been set.
func (o *UpdateMeterRequest) HasAggregationMethod() bool {
	if o != nil && !IsNil(o.AggregationMethod) {
		return true
	}

	return false
}

// SetAggregationMethod gets a reference to the given AggregationMethod and assigns it to the AggregationMethod field.
func (o *UpdateMeterRequest) SetAggregationMethod(v AggregationMethod) {
	o.AggregationMethod = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *UpdateMeterRequest) GetFilter() Filter {
	if o == nil || IsNil(o.Filter) {
		var ret Filter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMeterRequest) GetFilterOk() (*Filter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *UpdateMeterRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Filter and assigns it to the Filter field.
func (o *UpdateMeterRequest) SetFilter(v Filter) {
	o.Filter = &v
}

func (o UpdateMeterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMeterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.AggregationMethod) {
		toSerialize["aggregationMethod"] = o.AggregationMethod
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	return toSerialize, nil
}

type NullableUpdateMeterRequest struct {
	value *UpdateMeterRequest
	isSet bool
}

func (v NullableUpdateMeterRequest) Get() *UpdateMeterRequest {
	return v.value
}

func (v *NullableUpdateMeterRequest) Set(val *UpdateMeterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMeterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMeterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMeterRequest(val *UpdateMeterRequest) *NullableUpdateMeterRequest {
	return &NullableUpdateMeterRequest{value: val, isSet: true}
}

func (v NullableUpdateMeterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMeterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


