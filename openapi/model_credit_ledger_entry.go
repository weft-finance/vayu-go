/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreditLedgerEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditLedgerEntry{}

// CreditLedgerEntry struct for CreditLedgerEntry
type CreditLedgerEntry struct {
	Type BillingCycleStatus `json:"type"`
	Amount float32 `json:"amount"`
	InvoiceId *string `json:"invoiceId,omitempty"`
	BalanceAfterEntry float32 `json:"balanceAfterEntry"`
}

type _CreditLedgerEntry CreditLedgerEntry

// NewCreditLedgerEntry instantiates a new CreditLedgerEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditLedgerEntry(type_ BillingCycleStatus, amount float32, balanceAfterEntry float32) *CreditLedgerEntry {
	this := CreditLedgerEntry{}
	this.Type = type_
	this.Amount = amount
	this.BalanceAfterEntry = balanceAfterEntry
	return &this
}

// NewCreditLedgerEntryWithDefaults instantiates a new CreditLedgerEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditLedgerEntryWithDefaults() *CreditLedgerEntry {
	this := CreditLedgerEntry{}
	return &this
}

// GetType returns the Type field value
func (o *CreditLedgerEntry) GetType() BillingCycleStatus {
	if o == nil {
		var ret BillingCycleStatus
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreditLedgerEntry) GetTypeOk() (*BillingCycleStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreditLedgerEntry) SetType(v BillingCycleStatus) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *CreditLedgerEntry) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreditLedgerEntry) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreditLedgerEntry) SetAmount(v float32) {
	o.Amount = v
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise.
func (o *CreditLedgerEntry) GetInvoiceId() string {
	if o == nil || IsNil(o.InvoiceId) {
		var ret string
		return ret
	}
	return *o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditLedgerEntry) GetInvoiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceId) {
		return nil, false
	}
	return o.InvoiceId, true
}

// HasInvoiceId returns a boolean if a field has been set.
func (o *CreditLedgerEntry) HasInvoiceId() bool {
	if o != nil && !IsNil(o.InvoiceId) {
		return true
	}

	return false
}

// SetInvoiceId gets a reference to the given string and assigns it to the InvoiceId field.
func (o *CreditLedgerEntry) SetInvoiceId(v string) {
	o.InvoiceId = &v
}

// GetBalanceAfterEntry returns the BalanceAfterEntry field value
func (o *CreditLedgerEntry) GetBalanceAfterEntry() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BalanceAfterEntry
}

// GetBalanceAfterEntryOk returns a tuple with the BalanceAfterEntry field value
// and a boolean to check if the value has been set.
func (o *CreditLedgerEntry) GetBalanceAfterEntryOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceAfterEntry, true
}

// SetBalanceAfterEntry sets field value
func (o *CreditLedgerEntry) SetBalanceAfterEntry(v float32) {
	o.BalanceAfterEntry = v
}

func (o CreditLedgerEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditLedgerEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["amount"] = o.Amount
	if !IsNil(o.InvoiceId) {
		toSerialize["invoiceId"] = o.InvoiceId
	}
	toSerialize["balanceAfterEntry"] = o.BalanceAfterEntry
	return toSerialize, nil
}

func (o *CreditLedgerEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"amount",
		"balanceAfterEntry",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditLedgerEntry := _CreditLedgerEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditLedgerEntry)

	if err != nil {
		return err
	}

	*o = CreditLedgerEntry(varCreditLedgerEntry)

	return err
}

type NullableCreditLedgerEntry struct {
	value *CreditLedgerEntry
	isSet bool
}

func (v NullableCreditLedgerEntry) Get() *CreditLedgerEntry {
	return v.value
}

func (v *NullableCreditLedgerEntry) Set(val *CreditLedgerEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditLedgerEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditLedgerEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditLedgerEntry(val *CreditLedgerEntry) *NullableCreditLedgerEntry {
	return &NullableCreditLedgerEntry{value: val, isSet: true}
}

func (v NullableCreditLedgerEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditLedgerEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


