/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Criterion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Criterion{}

// Criterion struct for Criterion
type Criterion struct {
	Field string `json:"field"`
	Operator CriterionOperator `json:"operator"`
	Value string `json:"value"`
}

type _Criterion Criterion

// NewCriterion instantiates a new Criterion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCriterion(field string, operator CriterionOperator, value string) *Criterion {
	this := Criterion{}
	this.Field = field
	this.Operator = operator
	this.Value = value
	return &this
}

// NewCriterionWithDefaults instantiates a new Criterion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCriterionWithDefaults() *Criterion {
	this := Criterion{}
	return &this
}

// GetField returns the Field field value
func (o *Criterion) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *Criterion) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *Criterion) SetField(v string) {
	o.Field = v
}

// GetOperator returns the Operator field value
func (o *Criterion) GetOperator() CriterionOperator {
	if o == nil {
		var ret CriterionOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *Criterion) GetOperatorOk() (*CriterionOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *Criterion) SetOperator(v CriterionOperator) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *Criterion) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Criterion) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Criterion) SetValue(v string) {
	o.Value = v
}

func (o Criterion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Criterion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["operator"] = o.Operator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *Criterion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"operator",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCriterion := _Criterion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCriterion)

	if err != nil {
		return err
	}

	*o = Criterion(varCriterion)

	return err
}

type NullableCriterion struct {
	value *Criterion
	isSet bool
}

func (v NullableCriterion) Get() *Criterion {
	return v.value
}

func (v *NullableCriterion) Set(val *Criterion) {
	v.value = val
	v.isSet = true
}

func (v NullableCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCriterion(val *Criterion) *NullableCriterion {
	return &NullableCriterion{value: val, isSet: true}
}

func (v NullableCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


