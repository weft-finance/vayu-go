/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GetPlanResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPlanResponse{}

// GetPlanResponse struct for GetPlanResponse
type GetPlanResponse struct {
	Plan GetPlanResponsePlan `json:"plan"`
	AdditionalProperties map[string]interface{}
}

type _GetPlanResponse GetPlanResponse

// NewGetPlanResponse instantiates a new GetPlanResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPlanResponse(plan GetPlanResponsePlan) *GetPlanResponse {
	this := GetPlanResponse{}
	this.Plan = plan
	return &this
}

// NewGetPlanResponseWithDefaults instantiates a new GetPlanResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPlanResponseWithDefaults() *GetPlanResponse {
	this := GetPlanResponse{}
	return &this
}

// GetPlan returns the Plan field value
func (o *GetPlanResponse) GetPlan() GetPlanResponsePlan {
	if o == nil {
		var ret GetPlanResponsePlan
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *GetPlanResponse) GetPlanOk() (*GetPlanResponsePlan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *GetPlanResponse) SetPlan(v GetPlanResponsePlan) {
	o.Plan = v
}

func (o GetPlanResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPlanResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plan"] = o.Plan

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetPlanResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetPlanResponse := _GetPlanResponse{}

	err = json.Unmarshal(data, &varGetPlanResponse)

	if err != nil {
		return err
	}

	*o = GetPlanResponse(varGetPlanResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "plan")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetPlanResponse struct {
	value *GetPlanResponse
	isSet bool
}

func (v NullableGetPlanResponse) Get() *GetPlanResponse {
	return v.value
}

func (v *NullableGetPlanResponse) Set(val *GetPlanResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPlanResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPlanResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPlanResponse(val *GetPlanResponse) *NullableGetPlanResponse {
	return &NullableGetPlanResponse{value: val, isSet: true}
}

func (v NullableGetPlanResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPlanResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


