/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AggregationOperator The aggregation method defines how the events should be summed to represent a usage value.
type AggregationOperator string

// List of AggregationOperator
const (
	AGGREGATIONOPERATOR_COUNT AggregationOperator = "Count"
	AGGREGATIONOPERATOR_SUM AggregationOperator = "Sum"
	AGGREGATIONOPERATOR_DISTINCT AggregationOperator = "Distinct"
	AGGREGATIONOPERATOR_MAX AggregationOperator = "Max"
	AGGREGATIONOPERATOR_MIN AggregationOperator = "Min"
	AGGREGATIONOPERATOR_AVERAGE AggregationOperator = "Average"
	AGGREGATIONOPERATOR_FIRST AggregationOperator = "First"
	AGGREGATIONOPERATOR_LAST AggregationOperator = "Last"
)

// All allowed values of AggregationOperator enum
var AllowedAggregationOperatorEnumValues = []AggregationOperator{
	"Count",
	"Sum",
	"Distinct",
	"Max",
	"Min",
	"Average",
	"First",
	"Last",
}

func (v *AggregationOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregationOperator(value)
	for _, existing := range AllowedAggregationOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregationOperator", value)
}

// NewAggregationOperatorFromValue returns a pointer to a valid AggregationOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationOperatorFromValue(v string) (*AggregationOperator, error) {
	ev := AggregationOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregationOperator: valid values are %v", v, AllowedAggregationOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationOperator) IsValid() bool {
	for _, existing := range AllowedAggregationOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregationOperator value
func (v AggregationOperator) Ptr() *AggregationOperator {
	return &v
}

type NullableAggregationOperator struct {
	value *AggregationOperator
	isSet bool
}

func (v NullableAggregationOperator) Get() *AggregationOperator {
	return v.value
}

func (v *NullableAggregationOperator) Set(val *AggregationOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationOperator(val *AggregationOperator) *NullableAggregationOperator {
	return &NullableAggregationOperator{value: val, isSet: true}
}

func (v NullableAggregationOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

