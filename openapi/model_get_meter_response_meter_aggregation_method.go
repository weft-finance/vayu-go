/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GetMeterResponseMeterAggregationMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMeterResponseMeterAggregationMethod{}

// GetMeterResponseMeterAggregationMethod The aggregation method defines how the events should be summed to represent a usage value.
type GetMeterResponseMeterAggregationMethod struct {
	Operator AggregationOperator `json:"operator"`
	// The field inside the \"data\" property to apply the aggregation method to.
	Field *string `json:"field,omitempty"`
	// The fields that is used to group different events together when measuring the usage.
	InstanceKey *string `json:"instanceKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetMeterResponseMeterAggregationMethod GetMeterResponseMeterAggregationMethod

// NewGetMeterResponseMeterAggregationMethod instantiates a new GetMeterResponseMeterAggregationMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMeterResponseMeterAggregationMethod(operator AggregationOperator) *GetMeterResponseMeterAggregationMethod {
	this := GetMeterResponseMeterAggregationMethod{}
	this.Operator = operator
	return &this
}

// NewGetMeterResponseMeterAggregationMethodWithDefaults instantiates a new GetMeterResponseMeterAggregationMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMeterResponseMeterAggregationMethodWithDefaults() *GetMeterResponseMeterAggregationMethod {
	this := GetMeterResponseMeterAggregationMethod{}
	return &this
}

// GetOperator returns the Operator field value
func (o *GetMeterResponseMeterAggregationMethod) GetOperator() AggregationOperator {
	if o == nil {
		var ret AggregationOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *GetMeterResponseMeterAggregationMethod) GetOperatorOk() (*AggregationOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *GetMeterResponseMeterAggregationMethod) SetOperator(v AggregationOperator) {
	o.Operator = v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *GetMeterResponseMeterAggregationMethod) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMeterResponseMeterAggregationMethod) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *GetMeterResponseMeterAggregationMethod) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *GetMeterResponseMeterAggregationMethod) SetField(v string) {
	o.Field = &v
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *GetMeterResponseMeterAggregationMethod) GetInstanceKey() string {
	if o == nil || IsNil(o.InstanceKey) {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMeterResponseMeterAggregationMethod) GetInstanceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceKey) {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *GetMeterResponseMeterAggregationMethod) HasInstanceKey() bool {
	if o != nil && !IsNil(o.InstanceKey) {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *GetMeterResponseMeterAggregationMethod) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

func (o GetMeterResponseMeterAggregationMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMeterResponseMeterAggregationMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.InstanceKey) {
		toSerialize["instanceKey"] = o.InstanceKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetMeterResponseMeterAggregationMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMeterResponseMeterAggregationMethod := _GetMeterResponseMeterAggregationMethod{}

	err = json.Unmarshal(data, &varGetMeterResponseMeterAggregationMethod)

	if err != nil {
		return err
	}

	*o = GetMeterResponseMeterAggregationMethod(varGetMeterResponseMeterAggregationMethod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operator")
		delete(additionalProperties, "field")
		delete(additionalProperties, "instanceKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetMeterResponseMeterAggregationMethod struct {
	value *GetMeterResponseMeterAggregationMethod
	isSet bool
}

func (v NullableGetMeterResponseMeterAggregationMethod) Get() *GetMeterResponseMeterAggregationMethod {
	return v.value
}

func (v *NullableGetMeterResponseMeterAggregationMethod) Set(val *GetMeterResponseMeterAggregationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMeterResponseMeterAggregationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMeterResponseMeterAggregationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMeterResponseMeterAggregationMethod(val *GetMeterResponseMeterAggregationMethod) *NullableGetMeterResponseMeterAggregationMethod {
	return &NullableGetMeterResponseMeterAggregationMethod{value: val, isSet: true}
}

func (v NullableGetMeterResponseMeterAggregationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMeterResponseMeterAggregationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


