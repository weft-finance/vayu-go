/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CriterionOperator the model 'CriterionOperator'
type CriterionOperator string

// List of CriterionOperator
const (
	CRITERIONOPERATOR_EQUALS CriterionOperator = "Equals"
	CRITERIONOPERATOR_DOESNT_EQUAL CriterionOperator = "DoesntEqual"
	CRITERIONOPERATOR_HAS CriterionOperator = "Has"
	CRITERIONOPERATOR_IN CriterionOperator = "In"
	CRITERIONOPERATOR_CONTAINS CriterionOperator = "Contains"
	CRITERIONOPERATOR_DOESNT_CONTAIN CriterionOperator = "DoesntContain"
	CRITERIONOPERATOR_LARGER_THAN CriterionOperator = "LargerThan"
	CRITERIONOPERATOR_LOWER_THAN CriterionOperator = "LowerThan"
	CRITERIONOPERATOR_LOWER_EQUAL_TO CriterionOperator = "LowerEqualTo"
	CRITERIONOPERATOR_LARGER_EQUAL_TO CriterionOperator = "LargerEqualTo"
)

// All allowed values of CriterionOperator enum
var AllowedCriterionOperatorEnumValues = []CriterionOperator{
	"Equals",
	"DoesntEqual",
	"Has",
	"In",
	"Contains",
	"DoesntContain",
	"LargerThan",
	"LowerThan",
	"LowerEqualTo",
	"LargerEqualTo",
}

func (v *CriterionOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CriterionOperator(value)
	for _, existing := range AllowedCriterionOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CriterionOperator", value)
}

// NewCriterionOperatorFromValue returns a pointer to a valid CriterionOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCriterionOperatorFromValue(v string) (*CriterionOperator, error) {
	ev := CriterionOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CriterionOperator: valid values are %v", v, AllowedCriterionOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CriterionOperator) IsValid() bool {
	for _, existing := range AllowedCriterionOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CriterionOperator value
func (v CriterionOperator) Ptr() *CriterionOperator {
	return &v
}

type NullableCriterionOperator struct {
	value *CriterionOperator
	isSet bool
}

func (v NullableCriterionOperator) Get() *CriterionOperator {
	return v.value
}

func (v *NullableCriterionOperator) Set(val *CriterionOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableCriterionOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableCriterionOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCriterionOperator(val *CriterionOperator) *NullableCriterionOperator {
	return &NullableCriterionOperator{value: val, isSet: true}
}

func (v NullableCriterionOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCriterionOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

