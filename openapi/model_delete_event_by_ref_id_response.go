/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DeleteEventByRefIdResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteEventByRefIdResponse{}

// DeleteEventByRefIdResponse struct for DeleteEventByRefIdResponse
type DeleteEventByRefIdResponse struct {
	Event DeleteEventByRefIdResponseEvent `json:"event"`
	AdditionalProperties map[string]interface{}
}

type _DeleteEventByRefIdResponse DeleteEventByRefIdResponse

// NewDeleteEventByRefIdResponse instantiates a new DeleteEventByRefIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteEventByRefIdResponse(event DeleteEventByRefIdResponseEvent) *DeleteEventByRefIdResponse {
	this := DeleteEventByRefIdResponse{}
	this.Event = event
	return &this
}

// NewDeleteEventByRefIdResponseWithDefaults instantiates a new DeleteEventByRefIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteEventByRefIdResponseWithDefaults() *DeleteEventByRefIdResponse {
	this := DeleteEventByRefIdResponse{}
	return &this
}

// GetEvent returns the Event field value
func (o *DeleteEventByRefIdResponse) GetEvent() DeleteEventByRefIdResponseEvent {
	if o == nil {
		var ret DeleteEventByRefIdResponseEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *DeleteEventByRefIdResponse) GetEventOk() (*DeleteEventByRefIdResponseEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *DeleteEventByRefIdResponse) SetEvent(v DeleteEventByRefIdResponseEvent) {
	o.Event = v
}

func (o DeleteEventByRefIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteEventByRefIdResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteEventByRefIdResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteEventByRefIdResponse := _DeleteEventByRefIdResponse{}

	err = json.Unmarshal(data, &varDeleteEventByRefIdResponse)

	if err != nil {
		return err
	}

	*o = DeleteEventByRefIdResponse(varDeleteEventByRefIdResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteEventByRefIdResponse struct {
	value *DeleteEventByRefIdResponse
	isSet bool
}

func (v NullableDeleteEventByRefIdResponse) Get() *DeleteEventByRefIdResponse {
	return v.value
}

func (v *NullableDeleteEventByRefIdResponse) Set(val *DeleteEventByRefIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteEventByRefIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteEventByRefIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteEventByRefIdResponse(val *DeleteEventByRefIdResponse) *NullableDeleteEventByRefIdResponse {
	return &NullableDeleteEventByRefIdResponse{value: val, isSet: true}
}

func (v NullableDeleteEventByRefIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteEventByRefIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


