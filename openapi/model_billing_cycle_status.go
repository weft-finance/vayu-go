/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BillingCycleStatus the model 'BillingCycleStatus'
type BillingCycleStatus string

// List of BillingCycleStatus
const (
	GRANT BillingCycleStatus = "Grant"
	DEDUCT BillingCycleStatus = "Deduct"
)

// All allowed values of BillingCycleStatus enum
var AllowedBillingCycleStatusEnumValues = []BillingCycleStatus{
	"Grant",
	"Deduct",
}

func (v *BillingCycleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingCycleStatus(value)
	for _, existing := range AllowedBillingCycleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingCycleStatus", value)
}

// NewBillingCycleStatusFromValue returns a pointer to a valid BillingCycleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingCycleStatusFromValue(v string) (*BillingCycleStatus, error) {
	ev := BillingCycleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingCycleStatus: valid values are %v", v, AllowedBillingCycleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingCycleStatus) IsValid() bool {
	for _, existing := range AllowedBillingCycleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingCycleStatus value
func (v BillingCycleStatus) Ptr() *BillingCycleStatus {
	return &v
}

type NullableBillingCycleStatus struct {
	value *BillingCycleStatus
	isSet bool
}

func (v NullableBillingCycleStatus) Get() *BillingCycleStatus {
	return v.value
}

func (v *NullableBillingCycleStatus) Set(val *BillingCycleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingCycleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingCycleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingCycleStatus(val *BillingCycleStatus) *NullableBillingCycleStatus {
	return &NullableBillingCycleStatus{value: val, isSet: true}
}

func (v NullableBillingCycleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingCycleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

