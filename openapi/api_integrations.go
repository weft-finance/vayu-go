/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// IntegrationsAPIService IntegrationsAPI service
type IntegrationsAPIService service

type ApiExportNetSuiteSalesOrderRequest struct {
	ctx context.Context
	ApiService *IntegrationsAPIService
	netSuiteExportSalesOrderRequest *NetSuiteExportSalesOrderRequest
}

func (r ApiExportNetSuiteSalesOrderRequest) NetSuiteExportSalesOrderRequest(netSuiteExportSalesOrderRequest NetSuiteExportSalesOrderRequest) ApiExportNetSuiteSalesOrderRequest {
	r.netSuiteExportSalesOrderRequest = &netSuiteExportSalesOrderRequest
	return r
}

func (r ApiExportNetSuiteSalesOrderRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExportNetSuiteSalesOrderExecute(r)
}

/*
ExportNetSuiteSalesOrder Export sales order to NetSuite

This endpoint is used to export sales order to NetSuite.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExportNetSuiteSalesOrderRequest
*/
func (a *IntegrationsAPIService) ExportNetSuiteSalesOrder(ctx context.Context) ApiExportNetSuiteSalesOrderRequest {
	return ApiExportNetSuiteSalesOrderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IntegrationsAPIService) ExportNetSuiteSalesOrderExecute(r ApiExportNetSuiteSalesOrderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsAPIService.ExportNetSuiteSalesOrder")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/netsuite/export-sales-order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.netSuiteExportSalesOrderRequest == nil {
		return nil, reportError("netSuiteExportSalesOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.netSuiteExportSalesOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIntegrationsNetsuiteExportSalesOrderOptionsRequest struct {
	ctx context.Context
	ApiService *IntegrationsAPIService
}

func (r ApiIntegrationsNetsuiteExportSalesOrderOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.IntegrationsNetsuiteExportSalesOrderOptionsExecute(r)
}

/*
IntegrationsNetsuiteExportSalesOrderOptions Method for IntegrationsNetsuiteExportSalesOrderOptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIntegrationsNetsuiteExportSalesOrderOptionsRequest
*/
func (a *IntegrationsAPIService) IntegrationsNetsuiteExportSalesOrderOptions(ctx context.Context) ApiIntegrationsNetsuiteExportSalesOrderOptionsRequest {
	return ApiIntegrationsNetsuiteExportSalesOrderOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IntegrationsAPIService) IntegrationsNetsuiteExportSalesOrderOptionsExecute(r ApiIntegrationsNetsuiteExportSalesOrderOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodOptions
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsAPIService.IntegrationsNetsuiteExportSalesOrderOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/netsuite/export-sales-order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIntegrationsNetsuiteSyncInvoicesOptionsRequest struct {
	ctx context.Context
	ApiService *IntegrationsAPIService
}

func (r ApiIntegrationsNetsuiteSyncInvoicesOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.IntegrationsNetsuiteSyncInvoicesOptionsExecute(r)
}

/*
IntegrationsNetsuiteSyncInvoicesOptions Method for IntegrationsNetsuiteSyncInvoicesOptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIntegrationsNetsuiteSyncInvoicesOptionsRequest
*/
func (a *IntegrationsAPIService) IntegrationsNetsuiteSyncInvoicesOptions(ctx context.Context) ApiIntegrationsNetsuiteSyncInvoicesOptionsRequest {
	return ApiIntegrationsNetsuiteSyncInvoicesOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IntegrationsAPIService) IntegrationsNetsuiteSyncInvoicesOptionsExecute(r ApiIntegrationsNetsuiteSyncInvoicesOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodOptions
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsAPIService.IntegrationsNetsuiteSyncInvoicesOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/netsuite/sync-invoices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiNetSuiteSyncInvoicesRequest struct {
	ctx context.Context
	ApiService *IntegrationsAPIService
	netSuiteSyncInvoicesRequest *NetSuiteSyncInvoicesRequest
}

func (r ApiNetSuiteSyncInvoicesRequest) NetSuiteSyncInvoicesRequest(netSuiteSyncInvoicesRequest NetSuiteSyncInvoicesRequest) ApiNetSuiteSyncInvoicesRequest {
	r.netSuiteSyncInvoicesRequest = &netSuiteSyncInvoicesRequest
	return r
}

func (r ApiNetSuiteSyncInvoicesRequest) Execute() (*NetSuiteSyncInvoicesResponse, *http.Response, error) {
	return r.ApiService.NetSuiteSyncInvoicesExecute(r)
}

/*
NetSuiteSyncInvoices Sync invoices to NetSuite

This endpoint is used to sync invoices to NetSuite.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNetSuiteSyncInvoicesRequest
*/
func (a *IntegrationsAPIService) NetSuiteSyncInvoices(ctx context.Context) ApiNetSuiteSyncInvoicesRequest {
	return ApiNetSuiteSyncInvoicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetSuiteSyncInvoicesResponse
func (a *IntegrationsAPIService) NetSuiteSyncInvoicesExecute(r ApiNetSuiteSyncInvoicesRequest) (*NetSuiteSyncInvoicesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetSuiteSyncInvoicesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsAPIService.NetSuiteSyncInvoices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/netsuite/sync-invoices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.netSuiteSyncInvoicesRequest == nil {
		return localVarReturnValue, nil, reportError("netSuiteSyncInvoicesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.netSuiteSyncInvoicesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
