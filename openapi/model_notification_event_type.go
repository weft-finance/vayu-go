/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NotificationEventType the model 'NotificationEventType'
type NotificationEventType string

// List of NotificationEventType
const (
	NOTIFICATIONEVENTTYPE_ANONYMOUS_CUSTOMER NotificationEventType = "AnonymousCustomer"
	NOTIFICATIONEVENTTYPE_OVERAGE NotificationEventType = "Overage"
	NOTIFICATIONEVENTTYPE_UPCOMING_RENEWAL NotificationEventType = "UpcomingRenewal"
	NOTIFICATIONEVENTTYPE_INVOICE_APPROVED NotificationEventType = "InvoiceApproved"
)

// All allowed values of NotificationEventType enum
var AllowedNotificationEventTypeEnumValues = []NotificationEventType{
	"AnonymousCustomer",
	"Overage",
	"UpcomingRenewal",
	"InvoiceApproved",
}

func (v *NotificationEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationEventType(value)
	for _, existing := range AllowedNotificationEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationEventType", value)
}

// NewNotificationEventTypeFromValue returns a pointer to a valid NotificationEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationEventTypeFromValue(v string) (*NotificationEventType, error) {
	ev := NotificationEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationEventType: valid values are %v", v, AllowedNotificationEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationEventType) IsValid() bool {
	for _, existing := range AllowedNotificationEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationEventType value
func (v NotificationEventType) Ptr() *NotificationEventType {
	return &v
}

type NullableNotificationEventType struct {
	value *NotificationEventType
	isSet bool
}

func (v NullableNotificationEventType) Get() *NotificationEventType {
	return v.value
}

func (v *NullableNotificationEventType) Set(val *NotificationEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationEventType(val *NotificationEventType) *NullableNotificationEventType {
	return &NullableNotificationEventType{value: val, isSet: true}
}

func (v NullableNotificationEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

