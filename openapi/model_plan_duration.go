/*
Vayu API

The Vayu API is a RESTful API that allows you to submit events for processing and storage & manage billing related entities.           The API is secured using the Bearer Authentication scheme with JWT tokens.           To obtain a JWT token, please contact Vayu at team@withvayu.com

API version: 1.0.0
Contact: dev@withvayu.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PlanDuration struct for PlanDuration
type PlanDuration struct {
	UnlimitedDuration *UnlimitedDuration
	Float32 *float32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PlanDuration) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into UnlimitedDuration
	err = json.Unmarshal(data, &dst.UnlimitedDuration);
	if err == nil {
		jsonUnlimitedDuration, _ := json.Marshal(dst.UnlimitedDuration)
		if string(jsonUnlimitedDuration) == "{}" { // empty struct
			dst.UnlimitedDuration = nil
		} else {
			return nil // data stored in dst.UnlimitedDuration, return on the first match
		}
	} else {
		dst.UnlimitedDuration = nil
	}

	// try to unmarshal JSON data into Float32
	err = json.Unmarshal(data, &dst.Float32);
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			return nil // data stored in dst.Float32, return on the first match
		}
	} else {
		dst.Float32 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PlanDuration)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PlanDuration) MarshalJSON() ([]byte, error) {
	if src.UnlimitedDuration != nil {
		return json.Marshal(&src.UnlimitedDuration)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePlanDuration struct {
	value *PlanDuration
	isSet bool
}

func (v NullablePlanDuration) Get() *PlanDuration {
	return v.value
}

func (v *NullablePlanDuration) Set(val *PlanDuration) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDuration) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDuration(val *PlanDuration) *NullablePlanDuration {
	return &NullablePlanDuration{value: val, isSet: true}
}

func (v NullablePlanDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


