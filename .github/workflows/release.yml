name: Version and Release

on:
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:

jobs:
  get_versions:
    runs-on: ubuntu-latest
    outputs:
      go_versions: ${{ steps.get_versions.outputs.go_versions }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Go versions
        id: get_versions
        run: |
          VERSIONS=$(grep -v '^[[:space:]]*$' ./version_support/supported_versions.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr '\n' ' ')
          VERSIONS_ARRAY="["
          for version in $VERSIONS; do
            VERSIONS_ARRAY="$VERSIONS_ARRAY\"$version\","
          done
          VERSIONS_ARRAY=${VERSIONS_ARRAY%,}
          VERSIONS_ARRAY="$VERSIONS_ARRAY]"
          echo "Supported Go versions: $VERSIONS_ARRAY"
          echo "go_versions=$VERSIONS_ARRAY" >> $GITHUB_OUTPUT
          echo "$VERSIONS" >> go_versions.txt

      - name: Push versions to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: versions-artifact
          path: go_versions.txt

  bump_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the current version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          echo "Current version: $VERSION"
          IFS='.' read -r major minor patch <<< "$VERSION"
          patch=$((patch+1))
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "$new_version" >> version.txt

      - name: Update version in VERSION file
        run: echo ${{ steps.increment_version.outputs.new_version }} > VERSION

      - name: Push version to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: version-artifact
          path: version.txt

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
      - name: Commit version bump
        run: |
          git add VERSION
          git commit -m "Bump version to ${{ steps.increment_version.outputs.new_version }}"
          git push origin main

  release_go_versions:
    needs: [get_versions, bump_version]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go_version: ${{ fromJson(needs.get_versions.outputs.go_versions) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go_version }}

      - name: Release GO version tags
        run: |
          echo "Releasing GO version ${{ matrix.go_version }}"
          echo "Creating Git tag v${{ needs.bump_version.outputs.new_version }}-go${{ matrix.go_version }}"
          go mod edit -go=${{ matrix.go_version }}
          go mod tidy
          git add go.mod
          if [ -f go.sum ]; then
            git add go.sum
          fi
          git commit -m "Releasing for GO version ${{ matrix.go_version }}" --allow-empty || echo "Nothing to commit"
          echo "Creating Git tag v${{ needs.bump_version.outputs.new_version }}-go${{ matrix.go_version }}"
          git tag "v${{ needs.bump_version.outputs.new_version }}-go${{ matrix.go_version }}"
          git push origin "v${{ needs.bump_version.outputs.new_version }}-go${{ matrix.go_version }}"

  create_release:
    needs: [release_go_versions]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download output artifact
        uses: actions/download-artifact@v3
        with:
          name: versions-artifact
      
      - name: Download output artifact
        uses: actions/download-artifact@v3
        with:
          name: version-artifact
      
      - name: Read and echo artifact into $GITHUB_ENV
        run: |
          echo "GO_VERSIONS=$(cat go_versions.txt)" >> $GITHUB_ENV
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Generate release body
        run: |
          echo "Release version ${{ env.VERSION }}" > release_body.txt
          echo "" >> release_body.txt
          echo "### Supported Go Versions:" >> release_body.txt
          for version in ${{ env.GO_VERSIONS }}; do
            echo "- [v${{ env.VERSION }}-go$version](https://github.com/weft-finance/vayu-go/releases/tag/v${{ env.VERSION }}-go$version)" >> release_body.txt
          done

          cat release_body.txt

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "v${{ env.VERSION  }}"
          body_path: ./release_body.txt
          draft: false
          prerelease: false

