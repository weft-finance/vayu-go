name: Version and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  get_versions:
    runs-on: ubuntu-latest
    outputs:
      go_versions: ${{ steps.get_versions.outputs.go_versions }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Go versions
        id: get_versions
        run: |
          VERSIONS=$(grep -v '^[[:space:]]*$' ./version_support/supported_versions.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr '\n' ' ')

          VERSIONS_ARRAY="["
          for version in $VERSIONS; do
            VERSIONS_ARRAY="$VERSIONS_ARRAY\"$version\","
          done
          VERSIONS_ARRAY=${VERSIONS_ARRAY%,}
          VERSIONS_ARRAY="$VERSIONS_ARRAY]"

          echo "go_versions=$VERSIONS_ARRAY" >> $GITHUB_OUTPUT

  bump_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the current version
        run: |
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Increment version
        run: |
          echo "Current version: $VERSION"
          IFS='.' read -r major minor patch <<< "$VERSION"
          patch=$((patch+1))
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Update version in VERSION file
        run: echo ${{ env.new_version }} > VERSION

      - name: Commit version bump
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "Bump version to ${{ env.new_version }}"
          git push origin main

  release_go_versions:
    needs: [get_versions, bump_version]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go_version: ${{ fromJson(needs.get_versions.outputs.go_versions) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go_version }}

      - name: Release GO version tags
        run: |
          echo "Releasing GO version ${{ matrix.go_version }}"
          go mod edit -go=${{ matrix.go_version }}
          go mod tidy
          git add go.mod
          if [ -f go.sum ]; then
            git add go.sum
          fi
          git commit -m "Releasing for GO version ${{ matrix.go_version }}" --allow-empty || echo "Nothing to commit"
          git tag "v${{ needs.get-versions.outputs.go_versions }}-go${{ matrix.go_version }}"
          git push origin "v${{ needs.get-versions.outputs.go_versions }}-go${{ matrix.go_version }}"

  create_release:
    needs: release_go_versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate release body
        run: |
          echo "Release version ${{ needs.get-versions.outputs.go_versions }}" > release_body.txt
          echo "" >> release_body.txt
          echo "### Supported Go Versions:" >> release_body.txt
          echo "- [latest](https://github.com/weft-finance/vayu-go/releases/tag/latest)" >> release_body.txt
          for version in ${{ needs.get-versions.outputs.go_versions }}; do
            echo "- [v${{ needs.get-versions.outputs.go_versions }}-go$version](https://github.com/weft-finance/vayu-go/releases/tag/v${{ needs.get-versions.outputs.go_versions }}-go$version)" >> release_body.txt
          done

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.get-versions.outputs.go_versions }}"
          release_name: "v${{ needs.get-versions.outputs.go_versions }}"
          body_path: ./release_body.txt
          draft: false
          prerelease: false
